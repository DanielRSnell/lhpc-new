---
export const prerender = true;
import { getCollection, render } from 'astro:content';
import { Bell } from 'lucide-react';

import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

import { Button } from '@/components/ui/button';
import DefaultLayout from '@/layouts/DefaultLayout.astro';
import { cn } from '@/lib/utils';

// Get all changelog entries, sorted by date (descending for newest first)
const changelogEntries = await getCollection('changelog');
const sortedEntries = changelogEntries.sort((a, b) => {
  // Parse dates for proper chronological sorting
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);
  return dateB.getTime() - dateA.getTime(); // Descending order for newest first
});

// Render each entry
const renderedEntries = await Promise.all(
  sortedEntries.map(async (entry) => {
    const { Content } = await render(entry);
    return { ...entry, Content };
  }),
);
---

<DefaultLayout
  title="Changelog - LaunchHPC"
  description="New updates and product improvements"
>
  <section class="section-padding container max-w-5xl space-y-24">
    <!-- Header -->
    <div class="flex flex-wrap items-center justify-between gap-10">
      <div class="space-y-3">
        <h1 class="text-4xxl leading-tight font-medium tracking-tight">
          Changelog
        </h1>
        <p class="text-muted-foreground text-lg leading-snug">
          New updates and product improvements
        </p>
      </div>
      <Button
        variant="secondary"
        size="sm"
        className="bg-muted/40 h-12 gap-2 !px-4 text-base font-normal"
        client:load
      >
        Subscribe for updates
        <Bell className="h-4 w-4" />
      </Button>
    </div>

    <div class="[--sidebar-width:150px]">
      <!-- Changelog entries with timeline -->
      <div class="relative">
        {
          renderedEntries.map((entry, index) => (
            <div class="flex gap-5 md:gap-12">
              {/* Date column with dot */}
              <div class="relative mt-0.5 shrink-0 md:mt-1.5 md:w-[var(--sidebar-width)]">
                <time class="text-muted-foreground hidden md:inline-block">
                  {entry.data.date}
                </time>
                <div class="bg-background border-input absolute top-0 right-0 z-10 grid size-5 translate-x-1/2 place-items-center rounded-full border">
                  <div class="bg-secondary size-2 rounded-full" />
                </div>
                <div class="absolute top-0 right-0 h-full w-0.25 bg-[repeating-linear-gradient(to_bottom,var(--input)_0px,var(--input)_8px,transparent_12px,transparent_20px)]" />
              </div>

              {/* Content */}
              <div
                class={cn(
                  'mb-16 flex-1',
                  index === renderedEntries.length - 1 && 'mb-0',
                )}
              >
                <time class="text-muted-foreground mb-10 inline-block md:hidden">
                  {entry.data.date}
                </time>
                <h2 class="text-2xl leading-tight font-medium">
                  {entry.data.title}
                </h2>

                {/* MDX Content */}
                <div class="changelog-content mt-4 space-y-4">
                  <entry.Content />
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <div class="flex justify-end">
        <Button
          variant="secondary"
          className="mt-25 h-12 w-full md:w-[calc(100%-var(--sidebar-width))]"
          client:load
        >
          Load more
        </Button>
      </div>
    </div>
  </section>

  <style>
    /* Custom styles for changelog content */
    .changelog-content :global(h2) {
      color: var(--color-accent-foreground);
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
      font-size: 1.125rem;
      font-weight: 500;
    }

    .changelog-content :global(p) {
      color: var(--color-muted-foreground);
      font-size: 1rem;
      line-height: 1.625;
    }

    @media (min-width: 768px) {
      .changelog-content :global(p) {
        font-size: 1.125rem;
      }
    }

    .changelog-content :global(ul) {
      color: var(--color-muted-foreground);
      font-size: 1rem;
    }

    @media (min-width: 768px) {
      .changelog-content :global(ul) {
        font-size: 1.125rem;
      }
    }

    .changelog-content :global(li) {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .changelog-content :global(li::before) {
      content: '';
      background-color: var(--color-muted-foreground);
      display: flex;
      width: 0.375rem;
      height: 0.375rem;
      border-radius: 9999px;
      flex-shrink: 0;
    }

    .changelog-content :global(img) {
      margin-top: 1rem;
      margin-bottom: 1rem;
      filter: invert(1);
    }

    :global(.dark) .changelog-content :global(img) {
      filter: invert(0);
    }
  </style>
</DefaultLayout>
